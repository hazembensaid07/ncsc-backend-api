const express = require("express");
const router = express.Router();
const { isAuth } = require("../middlewares/SignIn");
const {
  sendRequest,
  getsendedRequest,
  getReceivedRequest,
  acceptRequest,
  refuseRequest,
} = require("../controllers/request");
const { sendRequestValidator } = require("../validators/request");
const { runValidation } = require("../validators");
/**
 * @swagger
 * components:
 *   schemas:
 *     sendRequest:
 *       type: object
 *       required:
 *         - emailReceiver
 *       properties:
 *         emailReceiver:
 *           type: string
 *           description: the request receiver email
 *           example: hazem@gmail.com
 */
/**
 * @swagger
 * components:
 *   schemas:
 *     acceptOrRefuseRequest:
 *       type: object
 *       required:
 *         - id
 *       properties:
 *         id:
 *           type: string
 *           description: the request id
 *           example: autogenerated id from mongodb handlet from the object of the request
 */
/**
 * @swagger
 * tags:
 *   name: request
 *   description: Request  API
 */
/**
 * @swagger
 * /api/request/send:
 *   post:
 *     summary: send request to future roommate
 *     tags: [request]
 *     requestBody:
 *         required: true
 *         content:
 *            application/json:
 *             schema:
 *              $ref: '#/components/schemas/sendRequest'
 *     parameters:
 *            - in: header
 *              name: authorization
 *              description: user   token (store it in local storage )
 *              required: true
 *              schema:
 *               type: string
 *     responses:
 *       200:
 *         description: request added.
 *       406:
 *         description: you can not send request to your self
 *       401:
 *         description: User With This Email is not available
 *       402:
 *         description:  User With This Email doesn't exist
 *       403:
 *         description: User have 2 roomates
 *       404:
 *         description:  User is already booked in
 *       405:
 *         description: you have already sent a request to this user
 *       400:
 *         description: Unauthorized
 *       500:
 *         description: server error
 */
router.post(
  "/request/send",
  isAuth,
  sendRequestValidator,
  runValidation,
  sendRequest
);
/**
 * @swagger
 * /api/request/sendedrequests:
 *   get:
 *     summary: get sent requests in the user profile
 *     tags: [request]
 *     parameters:
 *            - in: header
 *              name: authorization
 *              description: user   token
 *              required: true
 *              schema:
 *               type: string
 *     responses:
 *       200:
 *         description: requests loaded with success
 *       400:
 *         description: Unauthorized
 *       500:
 *         description: server error
 *       401:
 *         description: can not load requests
 *
 */
router.get("/request/sendedrequests", isAuth, getsendedRequest);
/**
 * @swagger
 * /api/request/receivedrequests:
 *   get:
 *     summary: get received  requests in the user profile
 *     tags: [request]
 *     parameters:
 *            - in: header
 *              name: authorization
 *              description: user   token
 *              required: true
 *              schema:
 *               type: string
 *     responses:
 *       200:
 *         description: requests loaded with success
 *       400:
 *         description: Unauthorized
 *       500:
 *         description: server error
 *       401:
 *         description: can not load requests
 *
 */
router.get("/request/receivedrequests", isAuth, getReceivedRequest);
/**
 * @swagger
 * /api/request/accept:
 *   post:
 *     summary: accept reuest
 *     tags: [request]
 *     requestBody:
 *         required: true
 *         content:
 *            application/json:
 *             schema:
 *              $ref: '#/components/schemas/acceptOrRefuseRequest'
 *     parameters:
 *            - in: header
 *              name: authorization
 *              description: user   token (store it in local storage )
 *              required: true
 *              schema:
 *               type: string
 *     responses:
 *       200:
 *         description: update success
 *       400:
 *         description: Unauthorized
 *       500:
 *         description: server error
 *       401:
 *         description: can not accept  request
 */
router.post("/request/accept", isAuth, acceptRequest);
/**
 * @swagger
 * /api/request/refuse:
 *   post:
 *     summary: accept reuest
 *     tags: [request]
 *     requestBody:
 *         required: true
 *         content:
 *            application/json:
 *             schema:
 *              $ref: '#/components/schemas/acceptOrRefuseRequest'
 *     parameters:
 *            - in: header
 *              name: authorization
 *              description: user   token (store it in local storage )
 *              required: true
 *              schema:
 *               type: string
 *     responses:
 *       200:
 *         description: Request  refused
 *       400:
 *         description: Unauthorized
 *       500:
 *         description: server error
 *       401:
 *         description: can not refuse  request
 *       402:
 *         description: there is no request  with this id
 */
router.post("/request/refuse", isAuth, refuseRequest);

module.exports = router;
